<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sps-logger="http://www.mulesoft.org/schema/mule/sps-logger" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/sps-logger http://www.mulesoft.org/schema/mule/sps-logger/current/mule-sps-logger.xsd">
	<sub-flow name="impl-get-catalog" doc:id="7c6fda80-5ca5-481a-ae62-51e4e4e431f4" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="56317080-aceb-4ed8-be49-5d9f9e37e976" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-catalog::START::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<sps-logger:sps-logger doc:name="Group Name" doc:id="70dccb25-54bc-4916-a6b5-ae9ee12c3814" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-catalog::QUERYPARAM::groupName: '  ++ write(attributes.queryParams.groupName, 'application/json')]" category="${logcat}"/>
		<db:select doc:name="Select CATALOG" doc:id="daf8cdca-0718-4628-8a77-0c1c1c699532" config-ref="mysql-config">
			<db:sql ><![CDATA[SELECT ALBUM.title as ALBUM_NM, ALBUM.publication_dt AS ALBUM_PUBLISH,
	   SONG.song_title as SONG_TITLE, SONG.genre AS SONG_GENRE, SONG.duration AS SONG_DURATION, 
       ARTIST.group_nm as GROUP_NM, ARTIST.last_nm AS ARTIST_LAST, ARTIST.first_nm AS ARTIST_FIRST, DATE_FORMAT(ARTIST.birth_date, "%Y-%m-%d") AS ARTIST_BIRTH, ifnull(ARTIST.death_date,"") AS ARTIST_DEATH
FROM bc_album ALBUM
LEFT OUTER JOIN bc_artist ARTIST
	ON ALBUM.group_nm = ARTIST.group_nm
LEFT OUTER JOIN bc_song SONG
	ON SONG.artist_nm = ARTIST.group_nm
WHERE ARTIST.group_nm LIKE :groupName
GROUP BY ALBUM_NM, SONG_TITLE, ARTIST_LAST
ORDER BY ALBUM_NM, SONG_TITLE, ARTIST_LAST]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	groupName: attributes.queryParams.groupName ++ "%"
}]]]></db:input-parameters>
		</db:select>
		<sps-logger:sps-logger doc:name="Select Catalog" doc:id="0a8dd2d2-2955-4c10-9136-28bcb525b238" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-catalog::SELECT::payload: ' ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="payload" doc:id="7b2403d0-f0bf-4fe5-b356-39517b5ec2c1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var catalogQuery = payload
fun formatDate(d: Date) = d as String {format: 'MM/dd/YYYY'}
---
{
    "albums": (catalogQuery groupBy $.ALBUM_NM mapObject (albumsGroup, agKey) -> (
        "album": {
            "albumTitle": agKey,
            "publicationDate": formatDate(albumsGroup.ALBUM_PUBLISH[0]),
            "groupName": albumsGroup.GROUP_NM[0],
            "songs": (albumsGroup groupBy $.SONG_TITLE mapObject (songsGroup, sgKey) -> (
                "song": {
                    "songTitle": sgKey,
                    "genre": songsGroup.SONG_GENRE[0],
                    "songDuration": songsGroup.SONG_DURATION[0],
                    "songWriters": (songsGroup groupBy $.ARTIST_LAST mapObject (artistsGroup, agwKey) -> (
                        "writer": {
                            "writer": artistsGroup.ARTIST_FIRST[0] ++ " " ++ artistsGroup.ARTIST_LAST[0],
                            "lifeDates": (
                                if (artistsGroup.ARTIST_DEATH[0] != "") 
                                (
                                    formatDate(artistsGroup.ARTIST_BIRTH[0]) ++ "-" ++ formatDate(artistsGroup.ARTIST_DEATH[0])
                                )
                                else (formatDate(artistsGroup.ARTIST_BIRTH[0]))
                            )
                        }
                    )).*writer orderBy $.writer
                }
            )).*song orderBy $.songTitle
        }
    )).*album orderBy $.publicationDate
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="599e1472-107a-40db-8585-c4a3179e05f0" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-catalog::END::payload: ' ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
</mule>
